[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst RoleExample = () => {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>ContentInfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" />img\n      <input type=\"checkbox\" /> checkbox\n      <input type=\"number\" /> spinbutton\n      <input type=\"radio\" /> radio\n      <input type=\"text\" /> textbox\n      <li>list item</li>\n      <ul>listgroup</ul>\n    </div>\n  )\n}\nrender(<RoleExample />);","type":"code","id":"az9bh"},{"content":"test('can find elements by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list'\n  ];\n\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n\n    expect(el).toBeInTheDocument();\n  }\n\n  \n});\n","type":"code","id":"ngyzj"},{"content":"const AccessibleName = () => {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  )\n}\n\nrender(<AccessibleName />)\n","type":"code","id":"hgs1s"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  const submitButton = screen.getByRole('button', {\n    name: /Submit/i\n  });\n\n  const cancelButton = screen.getByRole('button', {\n    name: /Cancel/i\n  })\n\n  expect(submitButton).toBeInTheDocument();\n  expect(cancelButton).toBeInTheDocument();\n})","type":"code","id":"ovk53"},{"content":"const MoreNames = () => {\n  return (\n    <div>\n      <label htmlFor=\"email\">Email</label>\n      <input id=\"email\" />\n\n      <label htmlFor=\"search\">Search</label>\n      <input id=\"search\" />\n    </div>\n  )\n}\nrender(<MoreNames/>)","type":"code","id":"fmvb0"},{"content":"test('shows an email and search input', () => {\n  render(<MoreNames />)\n\n  const emailInput = screen.getByRole('textbox', {name: /email/i})\n  const searchInput = screen.getByRole('textbox', {name: /search/i})\n\n  expect(emailInput).toBeInTheDocument();\n  expect(searchInput).toBeInTheDocument();\n})","type":"code","id":"vricc"},{"content":"const IconButtons = () => {\n  return (\n    <div>\n      <button aria-label=\"signin\">\n        <svg />\n      </button>\n      <button aria-label='signout'>\n        <svg />\n      </button>\n    </div>\n  )\n}\n\nrender(<IconButtons />)","type":"code","id":"cx4v2"},{"content":"test('find elements based on label', () => {\n  render(<IconButtons />);\n\n  const signinButton = screen.getByRole('button', {\n    name: /signin/i\n  })\n  const signoutButton = screen.getByRole('button', {\n    name: /signout/i\n  })\n\n  expect(signinButton).toBeInTheDocument();\n  expect(signoutButton).toBeInTheDocument();\n})","type":"code","id":"254eh"},{"content":"const ColorList = () => {\n  return (\n    <ul> \n      <li>Red</li>\n      <li>Blue</li>\n      <li>Yellow</li>\n    </ul>\n  )\n}\n\nrender(<ColorList />)","type":"code","id":"zjz9p"},{"content":"test(\"getBy, queryBy, findBy finding 0 elements\", async () => {\n  render(<ColorList />);\n  // getByは即時に結果を返す\n  expect(() => screen.getByRole('textbox')).toThrow();\n  // queryByはnullを返す\n  expect(screen.queryByRole('textbox')).toEqual(null);\n  // findByはdefaultで1秒待つ\n  let error = false;\n  try {\n    await screen.findByRole('textbox')\n  } catch(err) {\n    error = true;\n  }\n  expect(error).toEqual(true)\n})","type":"code","id":"ckts8"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async() => {\n  render(<ColorList />);\n  \n  expect(screen.getByRole('list')).toBeInTheDocument();\n  expect(screen.queryByRole('list')).toBeInTheDocument();\n  expect(await screen.findByRole('list')).toBeInTheDocument();\n});\n\n","type":"code","id":"023ke"},{"content":"test('getBy, queryBy, findBy when finding > 1 elements', async () => {\n  render(<ColorList />)\n  expect(() => screen.getByRole('listitem')).toThrow();\n  // queryByはnullを返す\n  expect(() => screen.queryByRole('listitem')).toThrow();\n  // findByはdefaultで1秒待つ\n  let error = false;\n  try {\n    await screen.findByRole('listitem')\n  } catch(err) {\n    error = true;\n  }\n  expect(error).toEqual(true)\n\n})","type":"code","id":"ju2cq"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\n  render(<ColorList />);\n\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\n})","type":"code","id":"0cgbb"},{"content":"test('favor using getBy to prove an element exsists', () => {\n  render(<ColorList />)\n  const element = screen.getByRole('list');\n  expect(element).toBeInTheDocument();\n})","type":"code","id":"temyi"},{"content":"const DataForm = () => {\n  const [email, setEmail] = useState('hoge@example.com');\n\n  return (\n    <form>\n      <h3>Enter Data</h3>\n      <div data-testid=\"image wrapper\">\n        <img alt=\"data\" src=\"data.jpg\" />\n      </div>\n\n      <label htmlFor=\"email\">email</label>\n      <input\n        id=\"email\"\n        value={email}\n        onChange={e => setEmail(e.target.value)}\n      />\n      <label htmlFor=\"color\">color</label>\n      <input\n        id=\"color\"\n        placeholder=\"red\"\n      />\n\n      <button title=\"click when ready to submit\">\n        submit\n      </button>\n    </form>\n  )\n};\n\nrender(<DataForm />)","type":"code","id":"m2xlm"},{"content":"// Query Function Suffixes\n\ntest('selecting different elements', () => {\n  render(<DataForm />);\n\n  const elements = [\n    screen.getByRole('button'),\n    screen.getByLabelText(/email/i),\n    screen.getByPlaceholderText(/red/i),\n    screen.getByText(/enter data/i),\n    screen.getByDisplayValue('hoge@example.com'),\n    screen.getByAltText('data'),\n    screen.getByTitle(/click when ready to submit/i),\n    screen.getByTestId(/image wrapper/i)\n\n  ];\n\n  for(let element of elements) {\n    expect(element).toBeInTheDocument();\n  }\n})","type":"code","id":"d0ncu"},{"content":"const FormData = () => {\n  return (\n    <div>\n      <button>Go back</button>\n      <form aria-label=\"form\">\n        <button>Save</button>\n        <button>Cancel</button>\n      </form>\n    </div>\n  )\n}\n\nrender(<FormData />)","type":"code","id":"sihon"},{"content":"const toContainRole = (container, role, quantity = 1) => {\n  const elements = within(container).queryAllByRole(role);\n  if(elements.length === quantity) {\n    return {\n      pass: true\n    }\n  }\n  return {\n    pass: false,\n    message: () => `expected to find ${quantity} ${role} elements. Found ${elements.length}` \n  }\n}\n\nexpect.extend({ toContainRole })","type":"code","id":"q80zg"},{"content":"test('the form displays two buttons', () => {\n  render(<FormData />)\n\n  const form = screen.getByRole('form');\n  const buttons = within(form).getAllByRole('button');\n  expect(buttons).toHaveLength(2);\n\n  // custom matchers\n  expect(form).toContainRole('button', 2);\n})","type":"code","id":"qbyzw"}]